package io.mehow.laboratory.gradle

import org.gradle.api.Action

/**
 * An entry point for configuration of feature flags code generation.
 */
open class LaboratoryExtension {
  /**
   * Sets package name for any factories or feature flags defined in this extension.
   * Package names can be individually overwritten in each generating block
   */
  var packageName: String = ""

  internal var featureInputs = emptyList<FeatureFlagInput>()
    private set

  /**
   * Generates a new feature in this module.
   */
  fun feature(name: String, action: Action<FeatureFlagInput>) {
    featureInputs += FeatureFlagInput(name).let { input ->
      action.execute(input)
      input.packageName = input.packageName ?: packageName
      return@let input
    }
  }

  internal var factoryInput: FeatureFactoryInput? = null
    private set

  /**
   * Generates a new feature factory in this module. This should generally be used only by a
   * top level module that needs to have information about all feature flags for QA purposes.
   */
  fun featureFactory() = featureFactory { }

  /**
   * Generates and customizes a new feature factory in this module.
   * This should generally be used only by a top level module
   * that needs to have information about all feature flags for QA purposes.
   */
  fun featureFactory(action: Action<FeatureFactoryInput>) {
    factoryInput = FeatureFactoryInput().let { input ->
      action.execute(input)
      input.packageName = input.packageName ?: packageName
      return@let input
    }
  }

  internal var storageInput: SourcedFeatureStorageInput? = null
    private set

  /**
   * Generates a new feature storage in this module. This should generally be used only by a
   * top level module that needs to to have information about all sources.
   * Feature storage generated by this method should be then used in the application.
   */
  fun sourcedStorage() = sourcedStorage { }

  /**
   * Generates and customizes a new feature storage in this module.
   * This should generally be used only by a top level module
   * that needs to to have information about all sources.
   * Feature storage generated by this method should be then used in the application.
   */
  fun sourcedStorage(action: Action<SourcedFeatureStorageInput>) {
    storageInput = SourcedFeatureStorageInput().let { input ->
      action.execute(input)
      input.packageName = input.packageName ?: packageName
      return@let input
    }
  }

  internal var featureSourcesFactory: FeatureFactoryInput? = null
    private set

  /**
   * Generates a new feature sources factory in this module. This should generally be used only by a
   * top level module that needs to have information about all feature flags for QA purposes.
   */
  fun featureSourceFactory() = featureSourceFactory { }

  /**
   * Generates a new feature sources factory in this module.
   * This should generally be used only by a top level module
   * that needs to have information about all feature flags for QA purposes.
   */
  fun featureSourceFactory(action: Action<FeatureFactoryInput>) {
    featureSourcesFactory = FeatureFactoryInput().let { input ->
      action.execute(input)
      input.packageName = input.packageName ?: packageName
      return@let input
    }
  }
}
